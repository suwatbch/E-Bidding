import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
function isTokenExpired(token: string): boolean {
  try {
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    // ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á decode JWT ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö exp
    const tokenData = JSON.parse(atob(token.split('.')[1] || '{}'));
    const currentTime = Math.floor(Date.now() / 1000);

    return tokenData.exp ? tokenData.exp < currentTime : false;
  } catch (error) {
    // ‡∏ñ‡πâ‡∏≤ token ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ parse ‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    return true;
  }
}

// ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á login ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ
const protectedRoutes = [
  '/auctions',
  '/auction',
  '/auctionform',
  '/my-auctions',
  '/alerts',
  '/company',
  '/language',
  '/user',
  '/token-session',
  '/test',
];

// ‡∏´‡∏ô‡πâ‡∏≤ auth ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠ login ‡πÅ‡∏•‡πâ‡∏ß
const authRoutes = ['/login', '/register', '/forget'];

export function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;

  // ‡∏î‡∏∂‡∏á token ‡∏à‡∏≤‡∏Å cookies
  const token = request.cookies.get('auth_token')?.value;

  console.log(
    `üîç Middleware checking: ${pathname}, Token: ${token ? 'exists' : 'none'}`
  );

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤ auth (login, register, forget)
  const isAuthRoute = authRoutes.some((route) => pathname.startsWith(route));

  if (isAuthRoute) {
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ token ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤ auth
    if (token && !isTokenExpired(token)) {
      console.log('‚úÖ User already logged in, redirecting to auctions');
      return NextResponse.redirect(new URL('/auctions', request.url));
    }
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤ auth ‡πÑ‡∏î‡πâ
    return NextResponse.next();
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á login
  const isProtectedRoute = protectedRoutes.some((route) =>
    pathname.startsWith(route)
  );

  if (isProtectedRoute) {
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ token
    if (!token) {
      console.log('üö´ No token found, redirecting to login');
      const loginUrl = new URL('/login', request.url);
      loginUrl.searchParams.set('returnUrl', pathname);
      return NextResponse.redirect(loginUrl);
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (isTokenExpired(token)) {
      console.log('‚è∞ Token expired, redirecting to login');
      const loginUrl = new URL('/login', request.url);
      loginUrl.searchParams.set('returnUrl', pathname);

      // ‡∏•‡∏ö token ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å cookies
      const response = NextResponse.redirect(loginUrl);
      response.cookies.delete('auth_token');
      return response;
    }

    // ‡∏ñ‡πâ‡∏≤ token ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ
    console.log('‚úÖ Token valid, allowing access to:', pathname);
  }

  return NextResponse.next();
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
};
