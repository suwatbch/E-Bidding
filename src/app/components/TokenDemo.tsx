'use client';

import React from 'react';
import { useAuth } from '@/app/contexts/AuthContext';
import {
  useTokenExpiration,
  formatExpirationDate,
} from '@/app/hooks/useTokenExpiration';
import TokenStatus from './TokenStatus';

const TokenDemo: React.FC = () => {
  const {
    user,
    isAuthenticated,
    tokenExpiresAt,
    isTokenExpired,
    getTimeUntilExpiration,
    logout,
  } = useAuth();

  const { timeRemaining, isExpiringSoon, timeRemainingMs } =
    useTokenExpiration();

  if (!isAuthenticated) {
    return (
      <div className="p-4 bg-gray-100 rounded-lg">
        <h3 className="font-bold text-gray-600">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ Login</h3>
        <p className="text-sm text-gray-500">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ login ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• token</p>
      </div>
    );
  }

  return (
    <div className="space-y-4 p-4 bg-white border rounded-lg shadow">
      <h3 className="text-lg font-bold text-gray-800">
        üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Token Session
      </h3>

      {/* User Info */}
      <div className="bg-blue-50 p-3 rounded-lg">
        <h4 className="font-semibold text-blue-800">üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:</h4>
        <p className="text-sm">‡∏ä‡∏∑‡πà‡∏≠: {user?.full_name}</p>
        <p className="text-sm">Username: {user?.username}</p>
        <p className="text-sm">Role: {user?.role}</p>
      </div>

      {/* Token Status Widget */}
      <div>
        <h4 className="font-semibold text-gray-700 mb-2">üîê ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Token:</h4>
        <TokenStatus showDetails={true} />
      </div>

      {/* Detailed Token Info */}
      <div className="bg-gray-50 p-3 rounded-lg">
        <h4 className="font-semibold text-gray-700 mb-2">
          ‚è∞ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Token:
        </h4>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm">
          <div>
            <strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏:</strong>
            <br />
            {tokenExpiresAt
              ? formatExpirationDate(tokenExpiresAt)
              : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
          </div>
          <div>
            <strong>‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠:</strong>
            <br />
            {timeRemaining}
          </div>
          <div>
            <strong>‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ):</strong>
            <br />
            {timeRemainingMs.toLocaleString()} ms
          </div>
          <div>
            <strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong>
            <br />
            {isTokenExpired() ? '‚ùå ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß' : '‚úÖ ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ'}
          </div>
          <div>
            <strong>‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏:</strong>
            <br />
            {isExpiringSoon ? '‚ö†Ô∏è ‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏' : 'üòä ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏á‡∏ß‡∏•'}
          </div>
          <div>
            <strong>Authentication:</strong>
            <br />
            {isAuthenticated ? 'üîì Authenticated' : 'üîí Not Authenticated'}
          </div>
        </div>
      </div>

      {/* Manual Check Buttons */}
      <div className="flex gap-2 flex-wrap">
        <button
          onClick={() => {
            const expired = isTokenExpired();
            alert(`Token ${expired ? '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß' : '‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ'}`);
          }}
          className="px-3 py-1 bg-blue-500 text-white rounded text-sm hover:bg-blue-600"
        >
          üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Token
        </button>

        <button
          onClick={() => {
            const timeLeft = getTimeUntilExpiration();
            const hours = Math.floor(timeLeft / (1000 * 60 * 60));
            const minutes = Math.floor(
              (timeLeft % (1000 * 60 * 60)) / (1000 * 60)
            );
            alert(`‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤: ${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`);
          }}
          className="px-3 py-1 bg-green-500 text-white rounded text-sm hover:bg-green-600"
        >
          ‚è±Ô∏è ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        </button>

        <button
          onClick={() => {
            if (confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
              logout();
            }
          }}
          className="px-3 py-1 bg-red-500 text-white rounded text-sm hover:bg-red-600"
        >
          üö™ Logout
        </button>
      </div>

      {/* Real-time Update Indicator */}
      <div className="text-xs text-gray-500 border-t pt-2">
        üí° <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ö‡∏ö real-time ‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
      </div>
    </div>
  );
};

export default TokenDemo;
