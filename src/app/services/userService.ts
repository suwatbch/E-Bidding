import axios, { AxiosResponse } from 'axios';

// Get base URL from environment or use default
const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';

// Create axios instance with base configuration
const userApi = axios.create({
  baseURL: `${API_URL}/api/users`,
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Helper function to get auth token from cookie first, then localStorage
const getAuthTokenFromStorage = (): string | null => {
  if (typeof window === 'undefined') {
    return null;
  }

  try {
    // 1. ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å cookie ‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥)
    const allCookies = document.cookie.split('; ');
    const authTokenCookie = allCookies.find((row) =>
      row.startsWith('auth_token=')
    );
    const cookieToken = authTokenCookie?.split('=')[1];

    if (cookieToken) {
      return cookieToken;
    }

    // 2. Fallback: ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å localStorage
    const localToken = localStorage.getItem('auth_token');
    return localToken;
  } catch (error) {
    console.error('Error getting auth token:', error);
    return null;
  }
};

// Add request interceptor to include auth token
userApi.interceptors.request.use(
  (config) => {
    const token = getAuthTokenFromStorage();
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    console.error('üî• Request interceptor error:', error);
    return Promise.reject(error);
  }
);

// Add response interceptor to handle auth errors
userApi.interceptors.response.use(
  (response) => {
    return response;
  },
  (error) => {
    const status = error.response?.status;

    if (status === 401) {
      console.error('üö´ Unauthorized: Please login again');
    } else if (status === 403) {
      console.error('üîí Forbidden: Insufficient permissions');
    } else if (status >= 500) {
      console.error('üî• Server Error:', error.response?.data?.message);
    }

    return Promise.reject(error);
  }
);

// Types for User API
export interface User {
  user_id: number;
  username: string;
  fullname: string;
  email: string;
  phone?: string;
  type: string;
  language_code: string;
  tax_id?: string;
  address?: string;
  image?: string;
  status: 0 | 1;
  is_locked: boolean;
  login_count: number;
  created_dt: string;
  updated_dt: string;
}

export interface UserResponse {
  success: boolean;
  message: string;
  data: User[];
  total: number;
}

export interface SingleUserResponse {
  success: boolean;
  message: string;
  data: User;
}

export interface CreateUserRequest {
  username: string;
  password: string;
  fullname: string;
  email: string;
  phone?: string;
  type?: string;
  language_code?: string;
  tax_id: string;
  address?: string;
  image?: string;
  status: 0 | 1;
  is_locked?: boolean;
}

export interface UpdateUserRequest {
  username?: string;
  password?: string;
  fullname?: string;
  email?: string;
  phone?: string;
  type: string;
  language_code?: string;
  tax_id?: string;
  address?: string;
  image?: string;
  status: 0 | 1;
  is_locked?: boolean;
}

export interface UserFormData {
  username: string;
  password: string;
  fullname: string;
  email: string;
  phone: string;
  type: string;
  language_code: string;
  tax_id: string;
  address: string;
  image: string;
  status: boolean;
}

export interface ApiResponse<T = any> {
  success: boolean;
  message: string;
  data?: T;
  error?: string;
}

// Helper function to handle API errors consistently
const handleApiError = (error: any, action: string): UserResponse => {
  console.error(`‚ùå Error ${action}:`, error);

  const status = error.response?.status;
  const serverMessage = error.response?.data?.message;
  let userMessage = `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£${action}`;

  if (status === 400) {
    userMessage = serverMessage || '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
  } else if (status === 401) {
    userMessage = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà';
  } else if (status === 403) {
    userMessage = '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ';
  } else if (status === 404) {
    userMessage = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£';
  } else if (status >= 500) {
    userMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå';
  } else if (error.code === 'ECONNABORTED') {
    userMessage = '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î';
  } else if (error.code === 'NETWORK_ERROR') {
    userMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ';
  }

  return {
    success: false,
    message: userMessage,
    data: [],
    total: 0,
  };
};

// User Service
export const userService = {
  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  getAllUsers: async (
    search?: string,
    type?: string,
    status?: string
  ): Promise<UserResponse> => {
    try {
      const params: any = {};
      if (search) params.search = search;
      if (type) params.type = type;
      if (status) params.status = status;

      const response: AxiosResponse<UserResponse> = await userApi.get('/', {
        params,
      });
      return response.data;
    } catch (error: any) {
      return handleApiError(error, '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
    }
  },

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏° ID
   */
  getUserById: async (userId: number): Promise<SingleUserResponse> => {
    try {
      const response: AxiosResponse<SingleUserResponse> = await userApi.get(
        `/${userId}`
      );
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Error getting user by ID:', error);
      return {
        success: false,
        message:
          error.response?.data?.message ||
          '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
        data: {} as User,
      };
    }
  },

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
   */
  getUsersByType: async (type: string): Promise<UserResponse> => {
    try {
      const response: AxiosResponse<UserResponse> = await userApi.get('/', {
        params: { type },
      });
      return response.data;
    } catch (error: any) {
      return handleApiError(error, '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó');
    }
  },

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
   */
  getUsersByStatus: async (status: boolean): Promise<UserResponse> => {
    try {
      const response: AxiosResponse<UserResponse> = await userApi.get('/', {
        params: { status: status ? '1' : '0' },
      });
      return response.data;
    } catch (error: any) {
      return handleApiError(error, '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞');
    }
  },

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
   */
  createUser: async (userData: CreateUserRequest): Promise<ApiResponse> => {
    try {
      const response: AxiosResponse<ApiResponse> = await userApi.post(
        '/',
        userData
      );
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Error creating user:', error);
      return {
        success: false,
        message:
          error.response?.data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
      };
    }
  },

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
   */
  updateUser: async (
    userId: number,
    userData: UpdateUserRequest
  ): Promise<ApiResponse> => {
    try {
      const response: AxiosResponse<ApiResponse> = await userApi.put(
        `/${userId}`,
        userData
      );
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Error updating user:', error);
      return {
        success: false,
        message:
          error.response?.data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
      };
    }
  },

  /**
   * ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (soft delete)
   */
  deleteUser: async (userId: number): Promise<ApiResponse> => {
    try {
      const response: AxiosResponse<ApiResponse> = await userApi.delete(
        `/${userId}`
      );
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Error deleting user:', error);
      return {
        success: false,
        message:
          error.response?.data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
      };
    }
  },

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ username ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  checkUsernameExists: async (
    username: string,
    excludeUserId?: number
  ): Promise<ApiResponse> => {
    try {
      const params: any = { username };
      if (excludeUserId) params.exclude_user_id = excludeUserId;

      const response: AxiosResponse<ApiResponse> = await userApi.get(
        '/check-username',
        { params }
      );
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Error checking username:', error);
      return {
        success: false,
        message:
          error.response?.data?.message ||
          '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
      };
    }
  },

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ email ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  checkEmailExists: async (
    email: string,
    excludeUserId?: number
  ): Promise<ApiResponse> => {
    try {
      const params: any = { email };
      if (excludeUserId) params.exclude_user_id = excludeUserId;

      const response: AxiosResponse<ApiResponse> = await userApi.get(
        '/check-email',
        { params }
      );
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Error checking email:', error);
      return {
        success: false,
        message:
          error.response?.data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•',
      };
    }
  },

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏†‡∏≤‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ language_code)
   */
  updateUserLanguage: async (
    userId: number,
    languageCode: string
  ): Promise<ApiResponse> => {
    try {
      const response: AxiosResponse<ApiResponse> = await userApi.patch(
        `/${userId}/language`,
        { language_code: languageCode }
      );

      return response.data;
    } catch (error: any) {
      console.error('‚ùå Error updating user language:', error);
      return {
        success: false,
        message:
          error.response?.data?.message ||
          '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏†‡∏≤‡∏©‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
      };
    }
  },
};

export default userService;
