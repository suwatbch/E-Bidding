import axios, { AxiosResponse } from 'axios';

// Get base URL from environment or use default
const API_URL = process.env.NEXT_PUBLIC_API_URL;

// Create axios instance with base configuration
const userCompanyApi = axios.create({
  baseURL: `${API_URL}/api/user-company`,
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Helper function to get auth token from cookie first, then localStorage
const getAuthTokenFromStorage = (): string | null => {
  if (typeof window === 'undefined') {
    return null;
  }

  try {
    // 1. ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å cookie ‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥)
    const allCookies = document.cookie.split('; ');
    const authTokenCookie = allCookies.find((row) =>
      row.startsWith('auth_token=')
    );
    const cookieToken = authTokenCookie?.split('=')[1];

    if (cookieToken) {
      return cookieToken;
    }

    // 2. Fallback: ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å localStorage
    const localToken = localStorage.getItem('auth_token');
    return localToken;
  } catch (error) {
    console.error('Error getting auth token:', error);
    return null;
  }
};

// Add request interceptor to include auth token
userCompanyApi.interceptors.request.use(
  (config) => {
    const token = getAuthTokenFromStorage();
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    console.error('üî• Request interceptor error:', error);
    return Promise.reject(error);
  }
);

// Add response interceptor to handle auth errors
userCompanyApi.interceptors.response.use(
  (response) => {
    return response;
  },
  (error) => {
    const status = error.response?.status;

    if (status === 401) {
      console.error('üö´ Unauthorized: Please login again');
    } else if (status === 403) {
      console.error('üîí Forbidden: Insufficient permissions');
    } else if (status >= 500) {
      console.error('üî• Server Error:', error.response?.data?.message);
    }

    return Promise.reject(error);
  }
);

// Types for UserCompany API
export interface UserCompany {
  id: number;
  user_id: number;
  company_id: number;
  role_in_company: string | null;
  is_primary: boolean;
  status: number;
  created_dt?: string;
  updated_dt?: string;
  // Joined data
  company_name?: string;
  company_tax_id?: string;
}

export interface UserCompanyResponse {
  success: boolean;
  message: string;
  data: UserCompany[];
  total: number;
}

export interface SingleUserCompanyResponse {
  success: boolean;
  message: string;
  data: UserCompany;
}

export interface CreateUserCompanyRequest {
  user_id: number;
  company_id: number;
  role_in_company?: string;
  is_primary?: boolean;
  status?: number;
}

export interface UpdateUserCompanyRequest {
  role_in_company?: string;
  is_primary?: boolean;
  status?: number;
}

export interface ApiResponse<T = any> {
  success: boolean;
  message: string;
  data?: T;
  error?: string;
}

// Helper function to handle API errors consistently
const handleApiError = (error: any, action: string): UserCompanyResponse => {
  console.error(`‚ùå Error ${action}:`, error);

  const status = error.response?.status;
  const serverMessage = error.response?.data?.message;
  let userMessage = `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£${action}`;

  if (status === 400) {
    userMessage = serverMessage || '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
  } else if (status === 401) {
    userMessage = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà';
  } else if (status === 403) {
    userMessage = '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ';
  } else if (status === 404) {
    userMessage = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£';
  } else if (status >= 500) {
    userMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå';
  } else if (error.code === 'ECONNABORTED') {
    userMessage = '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î';
  } else if (error.code === 'NETWORK_ERROR') {
    userMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ';
  }

  return {
    success: false,
    message: userMessage,
    data: [],
    total: 0,
  };
};

// UserCompany Service
export const userCompanyService = {
  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏° user_id
   */
  getUserCompanies: async (userId: number): Promise<UserCompanyResponse> => {
    try {
      const response: AxiosResponse<UserCompanyResponse> =
        await userCompanyApi.get(`/user/${userId}`);
      return response.data;
    } catch (error: any) {
      return handleApiError(error, '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
    }
  },

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ï‡∏≤‡∏° company_id
   */
  getCompanyUsers: async (companyId: number): Promise<UserCompanyResponse> => {
    try {
      const response: AxiosResponse<UserCompanyResponse> =
        await userCompanyApi.get(`/company/${companyId}`);
      return response.data;
    } catch (error: any) {
      return handleApiError(error, '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó');
    }
  },

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
   */
  addUserToCompany: async (
    data: CreateUserCompanyRequest
  ): Promise<SingleUserCompanyResponse> => {
    try {
      const response: AxiosResponse<SingleUserCompanyResponse> =
        await userCompanyApi.post('/', data);
      return response.data;
    } catch (error: any) {
      return {
        success: false,
        message: handleApiError(error, '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó').message,
        data: {} as UserCompany,
      };
    }
  },

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
   */
  updateUserCompany: async (
    id: number,
    data: UpdateUserCompanyRequest
  ): Promise<SingleUserCompanyResponse> => {
    try {
      const response: AxiosResponse<SingleUserCompanyResponse> =
        await userCompanyApi.post(`/update/${id}`, data);
      return response.data;
    } catch (error: any) {
      return {
        success: false,
        message: handleApiError(error, '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó').message,
        data: {} as UserCompany,
      };
    }
  },

  /**
   * ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
   */
  removeUserFromCompany: async (id: number): Promise<ApiResponse> => {
    try {
      const response: AxiosResponse<ApiResponse> = await userCompanyApi.post(
        `/delete/${id}`,
        {}
      );
      return response.data;
    } catch (error: any) {
      return {
        success: false,
        message: handleApiError(error, '‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó').message,
      };
    }
  },

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
   */
  setPrimaryCompany: async (
    userId: number,
    companyId: number
  ): Promise<ApiResponse> => {
    try {
      const response: AxiosResponse<ApiResponse> = await userCompanyApi.post(
        `/set-primary`,
        { user_id: userId, company_id: companyId }
      );
      return response.data;
    } catch (error: any) {
      return {
        success: false,
        message: handleApiError(error, '‡∏ï‡∏±‡πâ‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏´‡∏•‡∏±‡∏Å').message,
      };
    }
  },

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  getAllUserCompanies: async (): Promise<UserCompanyResponse> => {
    try {
      const response: AxiosResponse<UserCompanyResponse> =
        await userCompanyApi.get('/');
      return response.data;
    } catch (error: any) {
      return handleApiError(error, '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ-‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó');
    }
  },
};
