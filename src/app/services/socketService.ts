import { io } from 'socket.io-client';

// ‡πÉ‡∏ä‡πâ environment variable ‡∏´‡∏£‡∏∑‡∏≠ fallback ‡πÄ‡∏õ‡πá‡∏ô localhost ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
const SOCKET_URL = process.env.NEXT_PUBLIC_API_URL;

// ‡∏™‡∏£‡πâ‡∏≤‡∏á socket instance
const socket = io(SOCKET_URL, {
  autoConnect: false, // ‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á instance
  reconnection: true, // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  timeout: 10000, // timeout 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
});

socket.on('connect', () => {
  console.log('üü¢ Socket connected');
});

socket.on('disconnect', () => {
  console.log('üî¥ Socket disconnected');
});

socket.on('connect_error', (error: any) => {
  console.error('‚ùå Socket connection error:', error);
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ socket
export const connectSocket = () => {
  try {
    if (!socket.connected) {
      socket.connect();
    }
  } catch (error) {
    console.error('‚ùå Error connecting socket:', error);
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
export const disconnectSocket = () => {
  try {
    if (socket.connected) {
      socket.disconnect();
    }
  } catch (error) {
    console.error('‚ùå Error disconnecting socket:', error);
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
export const sendNotification = (name: string) => {
  try {
    if (!socket.connected) {
      console.warn('‚ö†Ô∏è Socket not connected, attempting to connect...');
      socket.connect();
    }
    socket.emit('new-notification', { name });
  } catch (error) {
    console.error('‚ùå Error sending notification:', error);
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
export const subscribeToNotifications = (callback: (data: any) => void) => {
  try {
    socket.on('notification', (data: any) => {
      callback(data);
    });
  } catch (error) {
    console.error('‚ùå Error subscribing to notifications:', error);
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
export const unsubscribeFromNotifications = (callback: (data: any) => void) => {
  try {
    socket.off('notification', callback);
  } catch (error) {
    console.error('‚ùå Error unsubscribing from notifications:', error);
  }
};

// =============================================================================
// AUCTION ROOM FUNCTIONS
// =============================================================================

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•
export const joinAuction = (data: {
  auctionId: number;
  userId: number;
  userName?: string;
  companyId?: number;
  companyName?: string;
}) => {
  try {
    if (!socket.connected) {
      socket.connect();
    }

    socket.emit('join-auction', data);
  } catch (error) {
    console.error('‚ùå Error joining auction:', error);
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•
export const leaveAuction = (data: { auctionId: number }) => {
  try {
    if (socket.connected) {
      socket.emit('leave-auction', data);
    }
  } catch (error) {
    console.error('‚ùå Error leaving auction:', error);
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•
export const subscribeToAuctionUpdates = (
  callback: (data: {
    auctionId: number;
    onlineCount: number;
    onlineUsers: Array<{
      userId: number;
      userName: string;
      companyName: string;
      socketId: string;
    }>;
  }) => void
) => {
  try {
    socket.on('auction-participants-updated', (data) => {
      callback(data);
    });
  } catch (error) {
    console.error('‚ùå Error subscribing to auction updates:', error);
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•
export const unsubscribeFromAuctionUpdates = () => {
  try {
    socket.off('auction-participants-updated');
  } catch (error) {
    console.error('‚ùå Error unsubscribing from auction updates:', error);
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•
export const subscribeToAuctionJoined = (
  callback: (data: {
    auctionId: number;
    onlineCount: number;
    onlineUsers: Array<any>;
  }) => void
) => {
  try {
    socket.on('auction-joined', (data) => {
      callback(data);
    });
  } catch (error) {
    console.error('‚ùå Error subscribing to auction joined:', error);
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•
export const unsubscribeFromAuctionJoined = () => {
  try {
    socket.off('auction-joined');
  } catch (error) {
    console.error('‚ùå Error unsubscribing from auction joined:', error);
  }
};

// =============================================================================
// BID FUNCTIONS
// =============================================================================

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà
export const subscribeToBidUpdates = (
  callback: (data: {
    auctionId: number;
    bidData: {
      bid_id: number;
      auction_id: number;
      user_id: number;
      company_id: number;
      bid_amount: number;
      bid_time: string;
      status: string;
    };
  }) => void
) => {
  try {
    socket.on('new-bid', (data) => {
      callback(data);
    });
  } catch (error) {
    console.error('‚ùå Error subscribing to bid updates:', error);
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
export const unsubscribeFromBidUpdates = () => {
  try {
    socket.off('new-bid');
  } catch (error) {
    console.error('‚ùå Error unsubscribing from bid updates:', error);
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ bid (reject, cancel, etc.)
export const subscribeToBidStatusUpdates = (
  callback: (data: {
    auctionId: number;
    bidId: number;
    status: string;
    bidData: {
      auction_id: number;
      user_id: number;
      company_id: number;
      bid_amount: number;
      bid_time: string;
      status: string;
      user_name?: string;
      company_name?: string;
    };
  }) => void
) => {
  try {
    socket.on('bid-status-updated', (data) => {
      callback(data);
    });
  } catch (error) {
    console.error('‚ùå Error subscribing to bid status updates:', error);
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ bid
export const unsubscribeFromBidStatusUpdates = () => {
  try {
    socket.off('bid-status-updated');
  } catch (error) {
    console.error('‚ùå Error unsubscribing from bid status updates:', error);
  }
};

// =============================================================================
// AUCTION STATUS FUNCTIONS
// =============================================================================

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•
export const subscribeToAuctionStatusUpdates = (
  callback: (data: {
    auctionId: number;
    status: number;
    timestamp: string;
  }) => void
) => {
  try {
    socket.on('auctionStatusUpdate', (data) => {
      callback(data);
    });
  } catch (error) {
    console.error('‚ùå Error subscribing to auction status updates:', error);
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•
export const unsubscribeFromAuctionStatusUpdates = () => {
  try {
    socket.off('auctionStatusUpdate');
  } catch (error) {
    console.error('‚ùå Error unsubscribing from auction status updates:', error);
  }
};

export default socket;
