import axios, { AxiosResponse } from 'axios';
import { setupSessionInterceptor } from '@/app/utils/apiInterceptor';

// Base URL configuration
const API_BASE_URL =
  process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:3001';

// Create axios instance for auctions API
const auctionsApi = axios.create({
  baseURL: `${API_BASE_URL}/api/auctions`,
  timeout: 50000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Helper function to get auth token from cookie first, then localStorage
const getAuthTokenFromStorage = (): string | null => {
  if (typeof window === 'undefined') {
    return null;
  }

  try {
    // 1. ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å cookie ‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥)
    const allCookies = document.cookie.split('; ');
    const authTokenCookie = allCookies.find((row) =>
      row.startsWith('auth_token=')
    );
    const cookieToken = authTokenCookie?.split('=')[1];

    if (cookieToken) {
      return cookieToken;
    }

    // 2. Fallback: ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å localStorage
    const localToken = localStorage.getItem('auth_token');
    return localToken;
  } catch (error) {
    console.error('Error getting auth token:', error);
    return null;
  }
};

// Add request interceptor to include auth token
auctionsApi.interceptors.request.use(
  (config) => {
    const token = getAuthTokenFromStorage();

    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    console.error('Request interceptor error:', error);
    return Promise.reject(error);
  }
);

// Setup session interceptor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ concurrent login
setupSessionInterceptor(auctionsApi);

// Add response interceptor to handle general auth errors (‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å session interceptor)
auctionsApi.interceptors.response.use(
  (response) => {
    return response;
  },
  (error) => {
    const status = error.response?.status;

    if (status === 401) {
      console.error('üö´ Unauthorized: Please login again');
    } else if (status >= 500) {
      console.error('üî• Server Error:', error.response?.data?.message);
    }

    return Promise.reject(error);
  }
);

// Types
export interface Auction {
  auction_id: number;
  name: string;
  auction_type_id: number;
  start_dt: string;
  end_dt: string;
  reserve_price: number;
  currency: number;
  status: number;
  is_deleted: number;
  remark?: string;
  created_dt: string;
  updated_dt: string;
}

export interface AuctionType {
  auction_type_id: number;
  name: string;
  description?: string;
  status: number;
}

export interface AuctionParticipant {
  id: number;
  auction_id: number;
  user_id: number;
  company_id: number;
  status: number;
  joined_dt: string;
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å getAuctionParticipantsWithDetails
  user_name?: string;
  user_email?: string;
  company_name?: string;
}

export interface AuctionItem {
  item_id: number; // ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ä‡πâ item_id ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà id
  auction_id: number;
  item_name: string;
  description: string;
  quantity: number;
  unit: string;
  base_price: number;
  status: number;
  // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏°‡∏µ created_dt, updated_dt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö auction_item
}

export interface AuctionBid {
  bid_id: number;
  auction_id: number;
  user_id: number;
  company_id: number;
  bid_amount: number;
  bid_time: string;
  status: string;
}

export interface ApiResponse<T = any> {
  success: boolean;
  message: string;
  data?: T;
  total?: number;
}

export interface AuctionsResponse extends ApiResponse {
  data: Auction[];
}

export interface AuctionTypesResponse extends ApiResponse {
  data: AuctionType[];
}

export interface AuctionParticipantsResponse extends ApiResponse {
  data: AuctionParticipant[];
}

export interface AuctionBidsResponse extends ApiResponse {
  data: AuctionBid[];
}

export interface SingleAuctionResponse extends ApiResponse {
  data: Auction;
}

export interface CreateAuctionRequest {
  name: string;
  auction_type_id: number;
  start_dt: string;
  end_dt: string;
  reserve_price: number;
  currency: number;
  status?: number;
  remark?: string;
}

export interface UpdateAuctionRequest extends CreateAuctionRequest {
  auction_id: number;
}

export interface CreateBidRequest {
  auction_id: number;
  bid_amount: number;
}

export interface CreateAuctionWithParticipantsRequest {
  createDataAuction: CreateAuctionRequest;
  createDataAuction_Participant?: {
    user_id: number;
    company_id?: number;
    status?: number;
  }[];
  createDataAuction_Item?: {
    item_name: string;
    description?: string;
    quantity: number;
    unit?: string;
    base_price: number;
    status?: number;
  }[];
}

export interface UpdateAuctionWithParticipantsRequest {
  createDataAuction: UpdateAuctionRequest;
  createDataAuction_Participant?: {
    id?: number;
    user_id: number;
    company_id?: number;
    status?: number;
  }[];
  createDataAuction_Item?: {
    item_id?: number;
    item_name: string;
    description?: string;
    quantity: number;
    unit?: string;
    base_price: number;
    status?: number;
  }[];
}

// Bid Status Constants
export const BidStatus = {
  ACCEPT: 'accept',
  REJECT: 'reject',
  CANCELED: 'canceled',
} as const;

export type BidStatusType = (typeof BidStatus)[keyof typeof BidStatus];

export const getBidStatusColor = (status: string): string => {
  switch (status) {
    case BidStatus.ACCEPT:
      return 'text-green-600 bg-green-100';
    case BidStatus.REJECT:
      return 'text-red-600 bg-red-100';
    case BidStatus.CANCELED:
      return 'text-gray-600 bg-gray-100';
    default:
      return 'text-gray-600 bg-gray-100';
  }
};

// Error handling helpers
const handleAuctionsApiError = (
  error: any,
  operation: string
): AuctionsResponse => {
  console.error(`Error ${operation}:`, error);

  const status = error.response?.status;
  const serverMessage = error.response?.data?.message;
  let userMessage = `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£${operation}`;

  if (status === 400) {
    userMessage = serverMessage || '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
  } else if (status === 401) {
    userMessage = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà';
  } else if (status === 403) {
    userMessage = '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ';
  } else if (status === 404) {
    userMessage = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£';
  } else if (status >= 500) {
    userMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå';
  } else if (error.code === 'ECONNABORTED') {
    userMessage = '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î';
  } else if (error.code === 'NETWORK_ERROR' || error.code === 'ECONNREFUSED') {
    userMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ';
  }

  return {
    success: false,
    message: userMessage,
    data: [],
  };
};

const handleAuctionTypesApiError = (
  error: any,
  operation: string
): AuctionTypesResponse => {
  console.error(`Error ${operation}:`, error);

  const status = error.response?.status;
  const serverMessage = error.response?.data?.message;
  let userMessage = `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£${operation}`;

  if (status === 400) {
    userMessage = serverMessage || '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
  } else if (status === 401) {
    userMessage = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà';
  } else if (status === 403) {
    userMessage = '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ';
  } else if (status === 404) {
    userMessage = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£';
  } else if (status >= 500) {
    userMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå';
  } else if (error.code === 'ECONNABORTED') {
    userMessage = '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î';
  } else if (error.code === 'NETWORK_ERROR' || error.code === 'ECONNREFUSED') {
    userMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ';
  }

  return {
    success: false,
    message: userMessage,
    data: [],
  };
};

const handleParticipantsApiError = (
  error: any,
  operation: string
): AuctionParticipantsResponse => {
  console.error(`Error ${operation}:`, error);

  const status = error.response?.status;
  const serverMessage = error.response?.data?.message;
  let userMessage = `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£${operation}`;

  if (status === 400) {
    userMessage = serverMessage || '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
  } else if (status === 401) {
    userMessage = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà';
  } else if (status === 403) {
    userMessage = '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ';
  } else if (status === 404) {
    userMessage = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£';
  } else if (status >= 500) {
    userMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå';
  } else if (error.code === 'ECONNABORTED') {
    userMessage = '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î';
  } else if (error.code === 'NETWORK_ERROR' || error.code === 'ECONNREFUSED') {
    userMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ';
  }

  return {
    success: false,
    message: userMessage,
    data: [],
  };
};

// Handle Bids API Error
const handleBidsApiError = (
  error: any,
  operation: string
): AuctionBidsResponse => {
  console.error(`Error ${operation}:`, error);

  const status = error.response?.status;
  const serverMessage = error.response?.data?.message;
  let userMessage = `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£${operation}`;

  if (status === 400) {
    userMessage = serverMessage || '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
  } else if (status === 401) {
    userMessage = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà';
  } else if (status === 403) {
    userMessage = '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ';
  } else if (status === 404) {
    userMessage = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£';
  } else if (status >= 500) {
    userMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå';
  } else if (error.code === 'ECONNABORTED') {
    userMessage = '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î';
  } else if (error.code === 'NETWORK_ERROR' || error.code === 'ECONNREFUSED') {
    userMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ';
  }

  return {
    success: false,
    message: userMessage,
    data: [],
  };
};

// Auctions Service
export const auctionsService = {
  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà)
   */
  getAllAuctions: async (
    startDate?: string,
    endDate?: string
  ): Promise<AuctionsResponse> => {
    try {
      const params: any = {};
      if (startDate) params.start_date = startDate;
      if (endDate) params.end_date = endDate;

      const response: AxiosResponse<AuctionsResponse> = await auctionsApi.get(
        '/',
        { params }
      );
      return response.data;
    } catch (error: any) {
      return handleAuctionsApiError(error, '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•');
    }
  },

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
   */
  getActiveAuctions: async (): Promise<AuctionsResponse> => {
    try {
      const response: AxiosResponse<AuctionsResponse> = await auctionsApi.get(
        '/',
        {
          params: { active_only: 'true' },
        }
      );
      return response.data;
    } catch (error: any) {
      return handleAuctionsApiError(error, '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
    }
  },

  /**
   * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•
   */
  searchAuctions: async (searchTerm: string): Promise<AuctionsResponse> => {
    try {
      if (!searchTerm.trim()) {
        return auctionsService.getAllAuctions();
      }

      const response: AxiosResponse<AuctionsResponse> = await auctionsApi.get(
        '/',
        {
          params: { search: searchTerm.trim() },
        }
      );
      return response.data;
    } catch (error: any) {
      return handleAuctionsApiError(error, '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•');
    }
  },

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° ID
   */
  getAuctionById: async (id: number): Promise<SingleAuctionResponse> => {
    try {
      const response: AxiosResponse<SingleAuctionResponse> =
        await auctionsApi.get(`/${id}`);
      return response.data;
    } catch (error: any) {
      console.error('Error fetching auction by ID:', error);
      return {
        success: false,
        message:
          error.response?.data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•',
        data: {} as Auction,
      };
    }
  },

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
   */
  createAuction: async (
    auctionData: CreateAuctionRequest
  ): Promise<ApiResponse> => {
    try {
      const response: AxiosResponse<ApiResponse> = await auctionsApi.post(
        '/',
        auctionData
      );
      return response.data;
    } catch (error: any) {
      console.error('Error creating auction:', error);
      return {
        success: false,
        message:
          error.response?.data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•',
      };
    }
  },

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° (Transaction)
   */
  createAuctionWithParticipants: async (
    auctionData: CreateAuctionWithParticipantsRequest
  ): Promise<ApiResponse> => {
    try {
      const response: AxiosResponse<ApiResponse> = await auctionsApi.post(
        '/with-participants',
        auctionData
      );
      return response.data;
    } catch (error: any) {
      console.error('Error creating auction with participants:', error);
      return {
        success: false,
        message:
          error.response?.data?.message ||
          '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°',
      };
    }
  },

  /**
   * ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•
   */
  updateAuction: async (
    id: number,
    auctionData: UpdateAuctionRequest
  ): Promise<ApiResponse> => {
    try {
      const response: AxiosResponse<ApiResponse> = await auctionsApi.post(
        `/update/${id}`,
        auctionData
      );
      return response.data;
    } catch (error: any) {
      console.error('Error updating auction:', error);
      return {
        success: false,
        message:
          error.response?.data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•',
      };
    }
  },

  /**
   * ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° (Transaction)
   */
  updateAuctionWithParticipants: async (
    id: number,
    auctionData: UpdateAuctionWithParticipantsRequest
  ): Promise<ApiResponse> => {
    try {
      const response: AxiosResponse<ApiResponse> = await auctionsApi.post(
        `/update-with-participants/${id}`,
        auctionData
      );
      return response.data;
    } catch (error: any) {
      console.error('Error updating auction with participants:', error);
      return {
        success: false,
        message:
          error.response?.data?.message ||
          '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°',
      };
    }
  },

  /**
   * ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• (hard delete) - ‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á 3 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á
   */
  deleteAuction: async (id: number): Promise<ApiResponse> => {
    try {
      const response: AxiosResponse<ApiResponse> = await auctionsApi.post(
        `/delete/${id}`,
        {}
      );
      return response.data;
    } catch (error: any) {
      console.error('Error deleting auction:', error);
      return {
        success: false,
        message: error.response?.data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•',
      };
    }
  },

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  getAuctionTypes: async (): Promise<AuctionTypesResponse> => {
    try {
      const response: AxiosResponse<AuctionTypesResponse> =
        await auctionsApi.get('/types');
      return response.data;
    } catch (error: any) {
      return handleAuctionTypesApiError(error, '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•');
    }
  },

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•
   */
  getAuctionParticipants: async (
    auctionId?: number
  ): Promise<AuctionParticipantsResponse> => {
    try {
      const params = auctionId ? { auction_id: auctionId } : {};
      const response: AxiosResponse<AuctionParticipantsResponse> =
        await auctionsApi.get('/participants', { params });
      return response.data;
    } catch (error: any) {
      return handleParticipantsApiError(error, '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•');
    }
  },

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô
   */
  createMultipleAuctionParticipants: async (
    auctionId: number,
    participants: {
      user_id: number;
      company_id?: number;
      status?: number;
    }[]
  ): Promise<ApiResponse> => {
    try {
      const response: AxiosResponse<ApiResponse> = await auctionsApi.post(
        '/participants/multiple',
        {
          auction_id: auctionId,
          participants,
        }
      );
      return response.data;
    } catch (error: any) {
      console.error('Error creating multiple auction participants:', error);
      return {
        success: false,
        message:
          error.response?.data?.message ||
          '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•',
      };
    }
  },

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•
   */
  getAuctionBids: async (auctionId: number): Promise<AuctionBidsResponse> => {
    try {
      const response: AxiosResponse<AuctionBidsResponse> =
        await auctionsApi.get(`/${auctionId}/bids`);
      return response.data;
    } catch (error: any) {
      return handleBidsApiError(error, '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤');
    }
  },

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß
   */
  getAcceptedBids: async (auctionId: number): Promise<AuctionBidsResponse> => {
    try {
      const response: AxiosResponse<AuctionBidsResponse> =
        await auctionsApi.get(`/${auctionId}/bids`, {
          params: { status: 'accept' },
        });
      return response.data;
    } catch (error: any) {
      return handleBidsApiError(error, '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö');
    }
  },

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
   */
  getUserBids: async (
    auctionId: number,
    userId: number
  ): Promise<AuctionBidsResponse> => {
    try {
      const response: AxiosResponse<AuctionBidsResponse> =
        await auctionsApi.get(`/${auctionId}/bids`, {
          params: { user_id: userId },
        });
      return response.data;
    } catch (error: any) {
      return handleBidsApiError(error, '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
    }
  },

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà
   */
  createBid: async (bidData: CreateBidRequest): Promise<ApiResponse> => {
    try {
      const response: AxiosResponse<ApiResponse> = await auctionsApi.post(
        `/bids`,
        bidData
      );
      return response.data;
    } catch (error: any) {
      console.error('Error creating bid:', error);
      return {
        success: false,
        message: error.response?.data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤',
      };
    }
  },

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
   */
  getAuctionParticipantsWithDetails: async (
    auctionId: number
  ): Promise<AuctionParticipantsResponse> => {
    try {
      const response: AxiosResponse<AuctionParticipantsResponse> =
        await auctionsApi.get(`/${auctionId}/participants`);
      return response.data;
    } catch (error: any) {
      return handleParticipantsApiError(error, '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•');
    }
  },

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•
   */
  getAuctionItems: async (auctionId: number): Promise<ApiResponse> => {
    try {
      const response: AxiosResponse<ApiResponse> = await auctionsApi.get(
        `/${auctionId}/items`
      );
      return response.data;
    } catch (error: any) {
      console.error('Error fetching auction items:', error);
      return {
        success: false,
        message:
          error.response?.data?.message ||
          '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
      };
    }
  },

  // =============================================================================
  // BID UTILITY FUNCTIONS (using mock data until API is ready)
  // =============================================================================

  /**
   * ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
   */
  getLatestBidByCompany: async (auctionId: number): Promise<AuctionBid[]> => {
    try {
      const response = await auctionsService.getAcceptedBids(auctionId);
      if (response.success) {
        const bids = response.data;
        const latestBids: { [companyId: number]: AuctionBid } = {};

        bids.forEach((bid) => {
          // Note: This will need company mapping logic
          const companyId = bid.user_id; // Placeholder until company mapping is available
          if (
            !latestBids[companyId] ||
            new Date(bid.bid_time) > new Date(latestBids[companyId].bid_time)
          ) {
            latestBids[companyId] = bid;
          }
        });

        return Object.values(latestBids).sort(
          (a, b) => a.bid_amount - b.bid_amount
        );
      }
      return [];
    } catch (error) {
      console.error('Error getting latest bids by company:', error);
      return [];
    }
  },

  /**
   * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏™‡∏ô‡∏≠‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
   */
  getLowestBid: async (auctionId: number): Promise<AuctionBid | null> => {
    try {
      const latestBids = await auctionsService.getLatestBidByCompany(auctionId);
      return latestBids.length > 0 ? latestBids[0] : null;
    } catch (error) {
      console.error('Error getting lowest bid:', error);
      return null;
    }
  },

  /**
   * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏™‡∏ô‡∏≠‡∏ó‡∏µ‡πà‡∏ä‡∏ô‡∏∞ (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö)
   */
  getWinningBid: async (auctionId: number): Promise<AuctionBid | null> => {
    try {
      const response = await auctionsService.getAcceptedBids(auctionId);
      if (response.success && response.data.length > 0) {
        // ‡∏´‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß
        const sortedBids = response.data.sort(
          (a, b) => a.bid_amount - b.bid_amount
        );
        return sortedBids[0];
      }
      return null;
    } catch (error) {
      console.error('Error getting winning bid:', error);
      return null;
    }
  },

  /**
   * ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
   */
  getBidStatsByStatus: async (auctionId: number) => {
    try {
      const response = await auctionsService.getAuctionBids(auctionId);
      if (response.success) {
        const bids = response.data;
        return {
          accept: bids.filter((bid) => bid.status === BidStatus.ACCEPT).length,
          reject: bids.filter((bid) => bid.status === BidStatus.REJECT).length,
          canceled: bids.filter((bid) => bid.status === BidStatus.CANCELED)
            .length,
          total: bids.length,
        };
      }
      return { accept: 0, reject: 0, canceled: 0, total: 0 };
    } catch (error) {
      console.error('Error getting bid stats by status:', error);
      return { accept: 0, reject: 0, canceled: 0, total: 0 };
    }
  },

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  hasUserBid: async (auctionId: number, userId: number): Promise<boolean> => {
    try {
      const response = await auctionsService.getUserBids(auctionId, userId);
      if (response.success) {
        return response.data.some((bid) => bid.status === BidStatus.ACCEPT);
      }
      return false;
    } catch (error) {
      console.error('Error checking if user has bid:', error);
      return false;
    }
  },

  /**
   * ‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•
   */
  placeBid: async (bidData: {
    auction_id: number;
    user_id: number;
    company_id: number;
    bid_amount: number;
  }): Promise<ApiResponse<any>> => {
    try {
      const response: AxiosResponse<ApiResponse> = await auctionsApi.post(
        `/${bidData.auction_id}/bids`,
        {
          user_id: bidData.user_id,
          company_id: bidData.company_id,
          bid_amount: bidData.bid_amount,
        }
      );
      return response.data;
    } catch (error: any) {
      console.error('Error placing bid:', error);
      return {
        success: false,
        message: error.response?.data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤',
      };
    }
  },

  /**
   * ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô reject)
   */
  rejectBid: async (bidId: number): Promise<ApiResponse> => {
    try {
      const response: AxiosResponse<ApiResponse> = await auctionsApi.post(
        `/bids/${bidId}/reject`
      );
      return response.data;
    } catch (error: any) {
      console.error('Error rejecting bid:', error);
      return {
        success: false,
        message:
          error.response?.data?.message ||
          '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤',
      };
    }
  },

  /**
   * ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•
   */
  updateAuctionStatus: async (
    auctionId: number,
    status: number
  ): Promise<ApiResponse> => {
    try {
      const response: AxiosResponse<ApiResponse> = await auctionsApi.post(
        `/update-status/${auctionId}`,
        { status }
      );
      return response.data;
    } catch (error: any) {
      console.error('Error updating auction status:', error);
      return {
        success: false,
        message:
          error.response?.data?.message ||
          '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•',
      };
    }
  },
};
