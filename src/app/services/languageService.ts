// Language Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏à‡∏≤‡∏Å API
import axios from 'axios';

const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';

// Types ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤
export interface Language {
  language_code: string;
  language_name: string;
  flag: string | null;
  is_default: boolean;
  status: number;
}

// Types ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤
export interface LanguageText {
  text_id: number;
  text_key: string;
  language_code: string;
  text_value: string;
}

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
const DEFAULT_LANGUAGES: Language[] = [
  {
    language_code: 'th',
    language_name: '‡πÑ‡∏ó‡∏¢',
    flag: 'üáπüá≠',
    is_default: true,
    status: 1,
  },
  {
    language_code: 'en',
    language_name: 'English',
    flag: 'üá¨üáß',
    is_default: false,
    status: 1,
  },
];

// ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
const DEFAULT_LANGUAGE_TEXTS: LanguageText[] = [
  // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
  {
    text_id: 1,
    text_key: 'login_title',
    language_code: 'th',
    text_value: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
  },
  {
    text_id: 2,
    text_key: 'login_title',
    language_code: 'en',
    text_value: 'Login',
  },
  {
    text_id: 3,
    text_key: 'logout',
    language_code: 'th',
    text_value: '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö',
  },
  { text_id: 4, text_key: 'logout', language_code: 'en', text_value: 'Logout' },
  {
    text_id: 5,
    text_key: 'forget_title',
    language_code: 'th',
    text_value: '‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô',
  },
  {
    text_id: 6,
    text_key: 'forget_title',
    language_code: 'en',
    text_value: 'Forgot Password',
  },
  {
    text_id: 7,
    text_key: 'username',
    language_code: 'th',
    text_value: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
  },
  {
    text_id: 8,
    text_key: 'username',
    language_code: 'en',
    text_value: 'Username',
  },
  {
    text_id: 9,
    text_key: 'password',
    language_code: 'th',
    text_value: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô',
  },
  {
    text_id: 10,
    text_key: 'password',
    language_code: 'en',
    text_value: 'Password',
  },
  { text_id: 11, text_key: 'submit', language_code: 'th', text_value: '‡∏™‡πà‡∏á' },
  {
    text_id: 12,
    text_key: 'submit',
    language_code: 'en',
    text_value: 'Submit',
  },
  {
    text_id: 13,
    text_key: 'cancel',
    language_code: 'th',
    text_value: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
  },
  {
    text_id: 14,
    text_key: 'cancel',
    language_code: 'en',
    text_value: 'Cancel',
  },
];

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô token ‡∏à‡∏≤‡∏Å cookie ‡πÅ‡∏•‡∏∞ localStorage
const getAuthTokenFromStorage = (): string | null => {
  if (typeof window === 'undefined') return null;

  // 1. ‡∏•‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å cookie ‡∏Å‡πà‡∏≠‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö middleware compatibility)
  const getCookieToken = (): string | null => {
    const allCookies = document.cookie.split('; ');
    const authTokenCookie = allCookies.find((row) =>
      row.startsWith('auth_token=')
    );
    return authTokenCookie?.split('=')[1] || null;
  };

  let token = getCookieToken();
  if (token) return token;

  // 2. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ cookie ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÉ‡∏ô localStorage (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö remember me)
  token = localStorage.getItem('auth_token');
  if (token) return token;

  // 3. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô localStorage ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÉ‡∏ô sessionStorage
  token = sessionStorage.getItem('auth_token');
  if (token) return token;

  // 4. ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÉ‡∏ô session object
  const rememberMe = localStorage.getItem('auth_remember_me') === 'true';
  const storage = rememberMe ? localStorage : sessionStorage;
  const sessionData = storage.getItem('auth_session');

  if (sessionData) {
    try {
      const session = JSON.parse(sessionData);
      token = session.token;
    } catch (error) {
      console.error('Error parsing session data:', error);
    }
  }

  return token || null;
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á headers
const getHeaders = (includeAuth: boolean = true) => {
  const headers: any = {
    'Content-Type': 'application/json',
  };

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° Authorization header ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ API ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ authentication
  if (includeAuth) {
    const token = getAuthTokenFromStorage();
    if (token) {
      headers.Authorization = `Bearer ${token}`;
    } else {
      console.warn(`‚ö†Ô∏è No auth token found - API call may fail`);
    }
  }

  return headers;
};

export class LanguageService {
  private static instance: LanguageService;
  private isLoading = false;
  private lastUpdateTime = 0;

  // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Service Class ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå model
  private languages: Language[] = [];
  private languageTexts: LanguageText[] = [];

  private constructor() {
    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
    this.loadFromStorage();

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô localStorage ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    if (this.languages.length === 0 || this.languageTexts.length === 0) {
      this.useDefaultData();
    }
  }

  public static getInstance(): LanguageService {
    if (!LanguageService.instance) {
      LanguageService.instance = new LanguageService();
    }
    return LanguageService.instance;
  }

  // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á localStorage ‡πÄ‡∏õ‡πá‡∏ô backup
  private saveToStorage(
    languages: Language[],
    languageTexts: LanguageText[]
  ): void {
    try {
      localStorage.setItem('cached_languages', JSON.stringify(languages));
      localStorage.setItem(
        'cached_language_texts',
        JSON.stringify(languageTexts)
      );
      localStorage.setItem('language_cache_time', Date.now().toString());
      console.log('üíæ Saved to localStorage cache');
    } catch (error) {
      console.error('‚ùå Failed to save to localStorage:', error);
    }
  }

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage
  private loadFromStorage(): void {
    try {
      const cachedLanguages = localStorage.getItem('cached_languages');
      const cachedTexts = localStorage.getItem('cached_language_texts');

      if (cachedLanguages && cachedTexts) {
        this.languages = JSON.parse(cachedLanguages);
        this.languageTexts = JSON.parse(cachedTexts);
        console.log('‚úÖ Loaded from localStorage cache:', {
          languages: this.languages.length,
          texts: this.languageTexts.length,
        });
      }
    } catch (error) {
      console.error('‚ùå Failed to load from localStorage:', error);
      this.languages = [];
      this.languageTexts = [];
    }
  }

  // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å temp files
  private useDefaultData(): void {
    try {
      console.log('üîÑ Using default language data...');

      this.languages = [...DEFAULT_LANGUAGES];
      this.languageTexts = [...DEFAULT_LANGUAGE_TEXTS];

      console.log('‚úÖ Loaded default data:', {
        languages: this.languages.length,
        texts: this.languageTexts.length,
      });
    } catch (error) {
      console.error('‚ùå Failed to use default data:', error);
      this.languages = DEFAULT_LANGUAGES;
      this.languageTexts = DEFAULT_LANGUAGE_TEXTS;
    }
  }

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏à‡∏≤‡∏Å API (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á token)
  async loadLanguagesFromAPI(): Promise<Language[]> {
    try {
      const response = await axios.get(`${API_URL}/api/languages`, {
        headers: getHeaders(false), // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á token
      });

      return response.data.data || [];
    } catch (error) {
      console.error('Error loading languages from API:', error);
      throw error;
    }
  }

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡∏à‡∏≤‡∏Å API (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á token)
  async loadLanguageTextsFromAPI(): Promise<LanguageText[]> {
    try {
      const response = await axios.get(`${API_URL}/api/languages/texts/all`, {
        headers: getHeaders(false), // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á token
      });

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API format ‡πÄ‡∏õ‡πá‡∏ô LanguageText format
      const apiData = response.data.data || [];
      const languageTexts: LanguageText[] = apiData.map((item: any) => ({
        text_id: item.id,
        text_key: item.keyname,
        language_code: item.language_code,
        text_value: item.text,
      }));

      return languageTexts;
    } catch (error) {
      console.error('Error loading language texts from API:', error);
      throw error;
    }
  }

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  async refreshLanguageData(): Promise<{
    languages: Language[];
    languageTexts: LanguageText[];
  }> {
    if (this.isLoading) {
      return {
        languages: this.languages,
        languageTexts: this.languageTexts,
      };
    }

    try {
      this.isLoading = true;

      // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å API ‡∏Å‡πà‡∏≠‡∏ô
      const [languages, languageTexts] = await Promise.all([
        this.loadLanguagesFromAPI(),
        this.loadLanguageTextsFromAPI(),
      ]);

      // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Service Class
      this.languages = languages;
      this.languageTexts = languageTexts;

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage ‡πÄ‡∏õ‡πá‡∏ô backup
      this.saveToStorage(languages, languageTexts);

      this.lastUpdateTime = Date.now();

      console.log('‚úÖ Successfully loaded from API:', {
        languages: this.languages.length,
        texts: this.languageTexts.length,
      });

      return {
        languages: this.languages,
        languageTexts: this.languageTexts,
      };
    } catch (error) {
      console.error('‚ùå Failed to load from API, using fallback...', error);

      // ‡∏ñ‡πâ‡∏≤ API ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô memory/localStorage
      if (this.languages.length > 0 || this.languageTexts.length > 0) {
        console.log('‚úÖ Using cached data from memory/localStorage');
        return {
          languages: this.languages,
          languageTexts: this.languageTexts,
        };
      }

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏¢ ‚Üí ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      console.log('‚ö†Ô∏è No cached data, using default data');
      this.useDefaultData();

      return {
        languages: this.languages,
        languageTexts: this.languageTexts,
      };
    } finally {
      this.isLoading = false;
    }
  }

  // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  getCurrentLanguageData(): {
    languages: Language[];
    languageTexts: LanguageText[];
  } {
    return {
      languages: [...this.languages],
      languageTexts: [...this.languageTexts],
    };
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏° key
  getText(textKey: string, languageCode: string = 'th'): string {
    const textEntry = this.languageTexts.find(
      (item) => item.text_key === textKey && item.language_code === languageCode
    );

    if (textEntry) {
      return textEntry.text_value;
    }

    // Fallback ‡πÑ‡∏õ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    if (languageCode !== 'th') {
      const fallbackEntry = this.languageTexts.find(
        (item) => item.text_key === textKey && item.language_code === 'th'
      );

      if (fallbackEntry) {
        return fallbackEntry.text_value;
      }
    }

    return `[${textKey}]`;
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö force update ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  async forceRefresh(): Promise<void> {
    this.lastUpdateTime = 0; // Reset timer
    await this.refreshLanguageData();
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏©‡∏≤ (‡∏ï‡πâ‡∏≠‡∏á token)
  async updateLanguage(
    languageCode: string,
    data: Partial<Language>
  ): Promise<{ success: boolean; message: string }> {
    try {
      const response = await axios.post(
        `${API_URL}/api/languages/${languageCode}`,
        data,
        {
          headers: getHeaders(true), // ‡∏ï‡πâ‡∏≠‡∏á token
        }
      );

      if (response.data.success) {
        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        await this.refreshLanguageData();
      }

      return response.data;
    } catch (error: any) {
      console.error('‚ùå Error updating language:', error);
      console.error('‚ùå Error response:', error.response?.data);
      return {
        success: false,
        message:
          error.response?.data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      };
    }
  }

  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏†‡∏≤‡∏©‡∏≤ (‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô) (‡∏ï‡πâ‡∏≠‡∏á token)
  async toggleLanguageStatus(
    languageCode: string
  ): Promise<{ success: boolean; message: string }> {
    try {
      // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      const currentLanguage = this.languages.find(
        (lang) => lang.language_code === languageCode
      );
      if (!currentLanguage) {
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£',
        };
      }

      // ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      const newStatus = currentLanguage.status === 1 ? 0 : 1;

      return await this.updateLanguage(languageCode, {
        language_name: currentLanguage.language_name,
        flag: currentLanguage.flag,
        is_default: currentLanguage.is_default,
        status: newStatus,
      });
    } catch (error: any) {
      console.error('Error toggling language status:', error);
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
      };
    }
  }

  // ‡∏•‡∏ö‡∏†‡∏≤‡∏©‡∏≤ (soft delete) (‡∏ï‡πâ‡∏≠‡∏á token)
  async deleteLanguage(
    languageCode: string
  ): Promise<{ success: boolean; message: string }> {
    try {
      const response = await axios.delete(
        `${API_URL}/api/languages/${languageCode}`,
        {
          headers: getHeaders(true), // ‡∏ï‡πâ‡∏≠‡∏á token
        }
      );

      if (response.data.success) {
        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        await this.refreshLanguageData();
        return {
          success: true,
          message: '‡∏•‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
        };
      } else {
        return {
          success: false,
          message: response.data.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏†‡∏≤‡∏©‡∏≤',
        };
      }
    } catch (error: any) {
      console.error('Error deleting language:', error);
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API',
      };
    }
  }

  // ===== Language Text Functions =====

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤ (‡∏ï‡πâ‡∏≠‡∏á token)
  async updateLanguageText(
    textId: number,
    data: Partial<LanguageText>
  ): Promise<{ success: boolean; message: string }> {
    try {
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà API ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      const apiData = {
        keyname: data.text_key,
        language_code: data.language_code,
        text: data.text_value,
      };

      const response = await axios.post(
        `${API_URL}/api/languages/texts/${textId}`,
        apiData,
        {
          headers: getHeaders(true), // ‡∏ï‡πâ‡∏≠‡∏á token
        }
      );

      if (response.data.success) {
        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        await this.refreshLanguageData();
      }

      return response.data;
    } catch (error: any) {
      console.error('‚ùå Error updating language text:', error);
      return {
        success: false,
        message:
          error.response?.data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°',
      };
    }
  }

  // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤ (‡∏ï‡πâ‡∏≠‡∏á token)
  async deleteLanguageText(
    textId: number
  ): Promise<{ success: boolean; message: string }> {
    try {
      const response = await axios.delete(
        `${API_URL}/api/languages/texts/${textId}`,
        {
          headers: getHeaders(true), // ‡∏ï‡πâ‡∏≠‡∏á token
        }
      );

      if (response.data.success) {
        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        await this.refreshLanguageData();
        return {
          success: true,
          message: '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
        };
      } else {
        return {
          success: false,
          message: response.data.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°',
        };
      }
    } catch (error: any) {
      console.error('Error deleting language text:', error);
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API',
      };
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÉ‡∏´‡∏°‡πà (‡∏ï‡πâ‡∏≠‡∏á token)
  async createLanguageText(
    data: Omit<LanguageText, 'text_id'>
  ): Promise<{ success: boolean; message: string }> {
    try {
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà API ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      const apiData = {
        keyname: data.text_key,
        language_code: data.language_code,
        text: data.text_value,
      };

      const response = await axios.post(
        `${API_URL}/api/languages/texts`,
        apiData,
        {
          headers: getHeaders(true), // ‡∏ï‡πâ‡∏≠‡∏á token
        }
      );

      if (response.data.success) {
        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        await this.refreshLanguageData();
      }

      return response.data;
    } catch (error: any) {
      console.error('‚ùå Error creating language text:', error);
      return {
        success: false,
        message:
          error.response?.data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°',
      };
    }
  }

  // ===== Utility Functions =====

  // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤
  getGroupedTexts(): Record<string, Record<string, string>> {
    const grouped: Record<string, Record<string, string>> = {};

    this.languageTexts.forEach((item) => {
      if (!grouped[item.language_code]) {
        grouped[item.language_code] = {};
      }
      grouped[item.language_code][item.text_key] = item.text_value;
    });

    return grouped;
  }

  // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏° key ‡πÅ‡∏•‡∏∞ language_code
  findLanguageText(
    textKey: string,
    languageCode: string
  ): LanguageText | undefined {
    return this.languageTexts.find(
      (item) => item.text_key === textKey && item.language_code === languageCode
    );
  }

  // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå cache
  clearCache(): void {
    this.languages = [...DEFAULT_LANGUAGES];
    this.languageTexts = [...DEFAULT_LANGUAGE_TEXTS];
    localStorage.removeItem('cached_languages');
    localStorage.removeItem('cached_language_texts');
    localStorage.removeItem('language_cache_time');
    console.log('üóëÔ∏è Language cache cleared, using default data');
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ cache ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  isCacheExpired(maxAgeMs: number = 30 * 60 * 1000): boolean {
    // 30 ‡∏ô‡∏≤‡∏ó‡∏µ
    const cacheTime = localStorage.getItem('language_cache_time');
    if (!cacheTime) return true;

    const age = Date.now() - parseInt(cacheTime);
    return age > maxAgeMs;
  }
}

// Export singleton instance
export const languageService = LanguageService.getInstance();
