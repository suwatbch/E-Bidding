// Language Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏à‡∏≤‡∏Å API
import axios from 'axios';
import { Language, dataLanguage, updateLanguageData } from '../model/language';
import {
  LanguageText,
  dataLanguageText,
  updateLanguageTextData,
} from '../model/language_text';

const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';

export class LanguageService {
  private static instance: LanguageService;
  private isLoading = false;
  private lastUpdateTime = 0;

  private constructor() {}

  public static getInstance(): LanguageService {
    if (!LanguageService.instance) {
      LanguageService.instance = new LanguageService();
    }
    return LanguageService.instance;
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô memory (‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô browser ‡πÑ‡∏î‡πâ)
  private async saveToMemory(
    languages: Language[],
    languageTexts: LanguageText[]
  ): Promise<void> {
    try {
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô dataLanguage ‡πÅ‡∏•‡∏∞ dataLanguageText ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    } catch (error) {
      console.error('‚ùå Failed to save to memory:', error);
    }
  }

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å temp files
  private async loadFromTempFiles(): Promise<{
    languages: Language[];
    languageTexts: LanguageText[];
  }> {
    try {
      console.log('üîÑ Loading from temp files...');

      // ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å temp files ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ dynamic import
      const languageTemp = await import('../model/language_Temp').catch(
        () => null
      );
      const languageTextTemp = await import(
        '../model/language_text_Temp'
      ).catch(() => null);

      if (!languageTemp || !languageTextTemp) {
        throw new Error('Temp files not found');
      }

      // ‡πÅ‡∏õ‡∏•‡∏á temp format ‡πÄ‡∏õ‡πá‡∏ô API format
      const languages = languageTemp.languages;
      const languageTexts = languageTextTemp.languageTexts.map((item: any) => ({
        text_id: item.id,
        text_key: item.keyname,
        language_code: item.language_code,
        text_value: item.text,
      }));

      console.log('‚úÖ Loaded from temp files:', {
        languages: languages.length,
        texts: languageTexts.length,
      });

      return { languages, languageTexts };
    } catch (error) {
      console.error('‚ùå Failed to load from temp files:', error);
      throw error;
    }
  }

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏à‡∏≤‡∏Å API
  async loadLanguagesFromAPI(): Promise<Language[]> {
    try {
      const response = await axios.get(`${API_URL}/api/languages`, {
        headers: {
          'Content-Type': 'application/json',
        },
      });

      return response.data.data || [];
    } catch (error) {
      console.error('Error loading languages from API:', error);
      throw error;
    }
  }

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡∏à‡∏≤‡∏Å API
  async loadLanguageTextsFromAPI(): Promise<LanguageText[]> {
    try {
      const response = await axios.get(`${API_URL}/api/languages/texts/all`, {
        headers: {
          'Content-Type': 'application/json',
        },
      });

      return response.data.data || [];
    } catch (error) {
      console.error('Error loading language texts from API:', error);
      throw error;
    }
  }

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  async refreshLanguageData(): Promise<{
    languages: Language[];
    languageTexts: LanguageText[];
  }> {
    if (this.isLoading) {
      return {
        languages: dataLanguage,
        languageTexts: dataLanguageText,
      };
    }

    try {
      this.isLoading = true;

      // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å API ‡∏Å‡πà‡∏≠‡∏ô
      const [languages, languageTexts] = await Promise.all([
        this.loadLanguagesFromAPI(),
        this.loadLanguageTextsFromAPI(),
      ]);

      // ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á temp files
      await this.saveToMemory(languages, languageTexts);

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå
      updateLanguageData(languages);
      updateLanguageTextData(languageTexts);

      this.lastUpdateTime = Date.now();

      return {
        languages: dataLanguage,
        languageTexts: dataLanguageText,
      };
    } catch (error) {
      console.error('‚ùå Failed to load from API, trying temp files...', error);

      try {
        // ‡∏ñ‡πâ‡∏≤ API ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å temp files
        const tempData = await this.loadFromTempFiles();

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå
        updateLanguageData(tempData.languages);
        updateLanguageTextData(tempData.languageTexts);

        console.log('‚úÖ Successfully loaded from temp files');

        return {
          languages: dataLanguage,
          languageTexts: dataLanguageText,
        };
      } catch (tempError) {
        console.error('‚ùå Failed to load from temp files too:', tempError);
        throw new Error(
          'Failed to load language data from both API and temp files'
        );
      }
    } finally {
      this.isLoading = false;
    }
  }

  // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  getCurrentLanguageData(): {
    languages: Language[];
    languageTexts: LanguageText[];
  } {
    return {
      languages: [...dataLanguage],
      languageTexts: [...dataLanguageText],
    };
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏° key
  getText(textKey: string, languageCode: string = 'th'): string {
    const textEntry = dataLanguageText.find(
      (item) => item.text_key === textKey && item.language_code === languageCode
    );

    if (textEntry) {
      return textEntry.text_value;
    }

    // Fallback ‡πÑ‡∏õ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    if (languageCode !== 'th') {
      const fallbackEntry = dataLanguageText.find(
        (item) => item.text_key === textKey && item.language_code === 'th'
      );

      if (fallbackEntry) {
        return fallbackEntry.text_value;
      }
    }

    return `[${textKey}]`;
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö force update ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  async forceRefresh(): Promise<void> {
    this.lastUpdateTime = 0; // Reset timer
    await this.refreshLanguageData();
  }
}

// Export singleton instance
export const languageService = LanguageService.getInstance();
