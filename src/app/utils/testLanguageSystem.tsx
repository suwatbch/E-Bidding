// Test Language System - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÉ‡∏´‡∏°‡πà
import {
  languageService,
  Language,
  LanguageText,
} from '../services/languageService';

export const testLanguageSystem = async () => {
  console.log('üß™ Testing New Language System...');

  try {
    // 1. ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API/Cache
    console.log('üì• Loading language data...');
    const result = await languageService.refreshLanguageData();

    console.log('‚úÖ Loaded data:', {
      languages: result.languages.length,
      texts: result.languageTexts.length,
    });

    // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    console.log('\nüî§ Testing text retrieval:');
    console.log('Thai:', languageService.getText('welcome', 'th'));
    console.log('English:', languageService.getText('welcome', 'en'));
    console.log(
      'Not found:',
      languageService.getText('non_existent_key', 'th')
    );

    // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ group ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    console.log('\nüìä Testing grouped texts:');
    const grouped = languageService.getGroupedTexts();
    Object.keys(grouped).forEach((lang) => {
      console.log(`${lang}:`, Object.keys(grouped[lang]).length, 'texts');
    });

    // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞
    console.log('\nüîç Testing find text:');
    const foundText = languageService.findLanguageText('welcome', 'th');
    console.log('Found:', foundText);

    // 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ cache
    console.log('\nüíæ Testing cache:');
    console.log('Cache expired?', languageService.isCacheExpired());

    // 6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    console.log('\nüìã Current data:');
    const currentData = languageService.getCurrentLanguageData();
    console.log(
      'Languages:',
      currentData.languages.map((l) => l.language_code)
    );
    console.log(
      'Text keys sample:',
      currentData.languageTexts.slice(0, 5).map((t) => t.text_key)
    );
  } catch (error) {
    console.error('‚ùå Test failed:', error);
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö CRUD operations
export const testLanguageCRUD = async () => {
  console.log('üß™ Testing Language CRUD Operations...');

  try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
    console.log('‚ûï Testing create text...');
    const createResult = await languageService.createLanguageText({
      text_key: 'test_key',
      language_code: 'th',
      text_value: '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
    });
    console.log('Create result:', createResult);

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï (‡∏ñ‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
    if (createResult.success) {
      console.log('‚úèÔ∏è Testing update text...');
      // ‡∏´‡∏≤ text_id ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
      const newText = languageService.findLanguageText('test_key', 'th');
      if (newText) {
        const updateResult = await languageService.updateLanguageText(
          newText.text_id,
          {
            text_value: '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß',
          }
        );
        console.log('Update result:', updateResult);

        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö
        console.log('üóëÔ∏è Testing delete text...');
        const deleteResult = await languageService.deleteLanguageText(
          newText.text_id
        );
        console.log('Delete result:', deleteResult);
      }
    }
  } catch (error) {
    console.error('‚ùå CRUD Test failed:', error);
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
export const showLanguageStats = () => {
  console.log('üìä Language System Statistics:');

  const data = languageService.getCurrentLanguageData();

  console.log(`Languages: ${data.languages.length}`);
  console.log(`Text entries: ${data.languageTexts.length}`);

  // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏≤‡∏©‡∏≤
  const textsByLanguage: Record<string, number> = {};
  data.languageTexts.forEach((text) => {
    textsByLanguage[text.language_code] =
      (textsByLanguage[text.language_code] || 0) + 1;
  });

  console.log('Texts by language:');
  Object.entries(textsByLanguage).forEach(([lang, count]) => {
    console.log(`  ${lang}: ${count} texts`);
  });

  // ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  const activeLanguages = data.languages.filter((lang) => lang.status === 1);
  console.log(
    `Active languages: ${activeLanguages.length}/${data.languages.length}`
  );

  // ‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  const defaultLanguage = data.languages.find((lang) => lang.is_default);
  console.log(`Default language: ${defaultLanguage?.language_code || 'None'}`);
};
