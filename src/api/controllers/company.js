const express = require('express');
const router = express.Router();
const {
  getAllCompanies,
  getCompanyById,
  getActiveCompanies,
  searchCompanies,
  updateCompany,
  createCompany,
  deleteCompany,
} = require('../helper/companyHelper');

// GET /api/company - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get('/', async (req, res) => {
  try {
    console.log('üìã Getting all companies...');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö query parameters
    const { active_only, search } = req.query;

    let result;

    if (search) {
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
      console.log('üîç Searching companies with term:', search);
      result = await searchCompanies(search);
    } else if (active_only === 'true') {
      // ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
      console.log('‚úÖ Getting active companies only...');
      result = await getActiveCompanies();
    } else {
      // ‡∏î‡∏∂‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      console.log('üìä Getting all companies...');
      result = await getAllCompanies();
    }

    if (result.success) {
      console.log(`‚úÖ Found ${result.data.length} companies`);

      res.json({
        success: true,
        data: result.data,
        message: search
          ? `‡∏û‡∏ö‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ${result.data.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ "${search}"`
          : `‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${result.data.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
        total: result.data.length,
      });
    } else {
      console.error('‚ùå Failed to get companies:', result.error);
      res.status(500).json({
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó',
        error: result.error,
      });
    }
  } catch (error) {
    console.error('‚ùå Error in getAllCompanies:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
      error: error.message,
    });
  }
});

// GET /api/company/:id - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ï‡∏≤‡∏° ID
router.get('/:id', async (req, res) => {
  try {
    const companyId = parseInt(req.params.id);

    if (isNaN(companyId)) {
      return res.status(400).json({
        success: false,
        message: '‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
      });
    }

    console.log('üîç Getting company by ID:', companyId);

    const result = await getCompanyById(companyId);

    if (result.success) {
      if (result.data.length > 0) {
        console.log('‚úÖ Company found:', result.data[0].name);
        res.json({
          success: true,
          data: result.data[0],
          message: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        });
      } else {
        console.log('‚ùå Company not found');
        res.status(404).json({
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        });
      }
    } else {
      console.error('‚ùå Failed to get company:', result.error);
      res.status(500).json({
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó',
        error: result.error,
      });
    }
  } catch (error) {
    console.error('‚ùå Error in getCompanyById:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
      error: error.message,
    });
  }
});

// PUT /api/company/:id - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
router.put('/:id', async (req, res) => {
  try {
    const companyId = parseInt(req.params.id);

    if (isNaN(companyId)) {
      return res.status(400).json({
        success: false,
        message: '‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
      });
    }

    const { name, tax_id, address, email, phone, status } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!name) {
      return res.status(400).json({
        success: false,
        message: '‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô',
      });
    }

    console.log('‚úèÔ∏è Updating company ID:', companyId);

    const result = await updateCompany(companyId, {
      name,
      tax_id,
      address,
      email,
      phone,
      status: status !== undefined ? status : 1,
    });

    if (result.success) {
      console.log('‚úÖ Company updated successfully');
      res.json({
        success: true,
        message: '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: { id: companyId },
      });
    } else {
      console.error('‚ùå Failed to update company:', result.error);
      res.status(500).json({
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó',
        error: result.error,
      });
    }
  } catch (error) {
    console.error('‚ùå Error in updateCompany:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
      error: error.message,
    });
  }
});

// POST /api/company - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÉ‡∏´‡∏°‡πà
router.post('/', async (req, res) => {
  try {
    const { name, tax_id, address, email, phone, status } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!name) {
      return res.status(400).json({
        success: false,
        message: '‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô',
      });
    }

    console.log('‚ûï Creating new company:', name);

    const result = await createCompany({
      name,
      tax_id,
      address,
      email,
      phone,
      status: status !== undefined ? status : 1,
    });

    if (result.success) {
      console.log('‚úÖ Company created successfully');
      res.status(201).json({
        success: true,
        message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: { id: result.insertId },
      });
    } else {
      console.error('‚ùå Failed to create company:', result.error);
      res.status(500).json({
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó',
        error: result.error,
      });
    }
  } catch (error) {
    console.error('‚ùå Error in createCompany:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
      error: error.message,
    });
  }
});

// DELETE /api/company/:id - ‡∏•‡∏ö‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó (soft delete)
router.delete('/:id', async (req, res) => {
  try {
    const companyId = parseInt(req.params.id);

    if (isNaN(companyId)) {
      return res.status(400).json({
        success: false,
        message: '‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
      });
    }

    console.log('üóëÔ∏è Deleting company ID:', companyId);

    const result = await deleteCompany(companyId);

    if (result.success) {
      console.log('‚úÖ Company deleted successfully');
      res.json({
        success: true,
        message: '‡∏•‡∏ö‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: { id: companyId },
      });
    } else {
      console.error('‚ùå Failed to delete company:', result.error);
      res.status(500).json({
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó',
        error: result.error,
      });
    }
  } catch (error) {
    console.error('‚ùå Error in deleteCompany:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
      error: error.message,
    });
  }
});

module.exports = router;
