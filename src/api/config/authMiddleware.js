const { verifyToken } = require('../helper/authHelper');

// ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ API ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ Token (Public Routes)
const PUBLIC_ROUTES = [
  '/api/auth/login',
  '/api/auth/logout',
  '/api/auth/otp',
  '/api/auth/reset-password',
  '/api/languages',
  '/api/languages/',
];

// ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ API ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
const ADMIN_ONLY_ROUTES = [];

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ route ‡πÄ‡∏õ‡πá‡∏ô public ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
function isPublicRoute(path) {
  return PUBLIC_ROUTES.some((route) => {
    if (route === path) return true;
    if (route.endsWith('/') && path.startsWith(route)) return true;
    return false;
  });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ route ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
function isAdminOnlyRoute(path) {
  return ADMIN_ONLY_ROUTES.some((route) => {
    const routePattern = route.replace(':userId', '\\d+');
    const regex = new RegExp(`^${routePattern}$`);
    return regex.test(path);
  });
}

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Authentication
function authMiddleware(req, res, next) {
  const path = req.path;
  const method = req.method;

  // ‡∏Ç‡πâ‡∏≤‡∏° authentication ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö public routes
  if (isPublicRoute(path)) {
    console.log(`üü¢ Public Route: ${method} ${path} - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ Token`);
    return next();
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Authorization header
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN

  if (!token) {
    console.log(`üî¥ No Token: ${method} ${path}`);
    return res.status(401).json({
      success: false,
      message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Access Token ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ Login ‡∏Å‡πà‡∏≠‡∏ô',
      code: 'NO_TOKEN',
    });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Token
  const tokenResult = verifyToken(token);

  if (!tokenResult.success) {
    console.log(`üî¥ Invalid Token: ${method} ${path}`);
    return res.status(403).json({
      success: false,
      message: 'Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏',
      code: 'INVALID_TOKEN',
    });
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô request
  req.user = tokenResult.data;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Admin ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin-only routes
  if (isAdminOnlyRoute(path)) {
    if (req.user.type !== 'admin') {
      console.log(
        `üî¥ Admin Required: ${method} ${path} - User: ${req.user.username} (${req.user.type})`
      );
      return res.status(403).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô',
        code: 'ADMIN_REQUIRED',
      });
    }
  }

  console.log(
    `üü¢ Authenticated: ${method} ${path} - User: ${req.user.username} (${req.user.type})`
  );
  next();
}

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Admin
function requireAdmin(req, res, next) {
  if (!req.user) {
    return res.status(401).json({
      success: false,
      message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£ Authentication',
      code: 'NO_AUTH',
    });
  }

  if (req.user.type !== 'admin') {
    return res.status(403).json({
      success: false,
      message: '‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô',
      code: 'ADMIN_REQUIRED',
    });
  }

  next();
}

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏´‡∏£‡∏∑‡∏≠ Admin
function requireOwnerOrAdmin(req, res, next) {
  if (!req.user) {
    return res.status(401).json({
      success: false,
      message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£ Authentication',
      code: 'NO_AUTH',
    });
  }

  const requestedUserId = parseInt(req.params.userId);
  const isOwner = req.user.user_id === requestedUserId;
  const isAdmin = req.user.type === 'admin';

  if (!isOwner && !isAdmin) {
    return res.status(403).json({
      success: false,
      message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ',
      code: 'ACCESS_DENIED',
    });
  }

  next();
}

module.exports = {
  authMiddleware,
  requireAdmin,
  requireOwnerOrAdmin,
  isPublicRoute,
  isAdminOnlyRoute,
  PUBLIC_ROUTES,
  ADMIN_ONLY_ROUTES,
};
